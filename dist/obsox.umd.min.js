(function(a,b){'object'==typeof exports&&'undefined'!=typeof module?module.exports=b():'function'==typeof define&&define.amd?define(b):a.obsox=b()})(this,function(){'use strict';function a(a,b,c){return a._obsox&&!c?a._obsox.proxy:new d(a,b).proxy}class b{constructor(a,b,c){this.key=b||'',this.values=[],this.children=[],this.parent=a,this.appendValues(c)}removeAllChildren(){this.children=[]}clearValues(){this.values=[]}getChild(a){for(const b of this.children)if(a===b.key)return b;return null}ensureChild(a){let c=this.getChild(a);return c||(c=new b(this,a),this.children.push(c)),c}addChild(a,c){let d=this.getChild(a);return d?d.appendValues(c):(d=new b(this,a,c),this.children.push(d)),d}appendValues(a){if('undefined'!=typeof a){const b=Array.isArray(a)?a:[a];this.values=this.values.concat(b)}}}class c{constructor(a,c){if(this.sep=a&&a.separator||'.',this.$=new b,c)for(const a in c)this.add(a,c[a])}add(a,b){let c=this.$;if(''===a)return void c.appendValues(b);let d=(a||'').trim().split(this.sep);for(let e=0;e<d.length;e++)c=e===d.length-1?c.addChild(d[e],b):c.ensureChild(d[e])}_getNode(a){let b=this.$;if(''!==a){let c=(a||'').trim().split(this.sep);for(let a=0;a<c.length&&!!b;a++)b=b.getChild(c[a])}return b}get(a){const b=this._getNode(a);return b?b.values:[]}getSub(a,b){let c={grouped:{},ungrouped:[]};return this._subChildren(a,this._getNode(a),c),b?c.grouped:c.ungrouped}_subChildren(a,b,d){if(b){d.grouped[a]=b.values,d.ungrouped=d.ungrouped.concat(b.values);for(const e of b.children){let b=`${a}${this.sep}${e.key}`;this._subChildren(b,e,d)}}}remove(a,b){const c=this._getNode(a);let d=!1;if(c)for(;;){let a=-1;for(let d=0;d<c.values.length;d++)if(c.values[d]==b){a=d;break}if(0<=a)c.values.splice(a,1),d=!0;else break}return d}removeKey(a){if(a){const b=this._getNode(a);let c=!1;if(b){c=!0;const a=b.parent;let d=-1;for(let e,c=0;c<a.children.length;c++)if(e=a.children[c],e==b){d=c;break}0<=d&&a.children.splice(d,1)}return c}throw'Cannot remove the root key'}removeChildren(a){let b=!1;const c=this._getNode(a);return c&&(c.removeAllChildren(),b=!0),b}clearKey(a,b){const c=this._getNode(a);c&&this._clearNodeValues(c,b)}_clearNodeValues(a,b){if(a.clearValues(),b)for(const d of a.children)this._clearNodeValues(d,b)}}class d{constructor(a,b){this.raw=a,this.path=b||[],a._obsox=this,this._proxy=new Proxy(a,this),this.tree=new c}get proxy(){return this._proxy}get(b,c,d){const e=Reflect.get(b,c,d);return'object'==typeof e?a(e,this.path.concat(c)):e}set(a,b,c){Reflect.set(a,b,c)}}return function(b){return a(b,[],!0)}});